import express from 'express';
import dotenv from 'dotenv';
import { createGoogleCalendarEvent } from './calendarConfig.js';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json());

// Mapeamento dos espa√ßos do formul√°rio para os calend√°rios
function getCalendarIdBySpace(espacoSelecionado) {
    const calendarIds = JSON.parse(process.env.CALENDAR_IDS);

    const spaceMapping = {
        'Supera Parque': 'SUPERA_PARQUE',
        'Biblioteca frente': 'BIBLIOTECA_FRENTE',
        'Biblioteca fundo': 'BIBLIOTECA_FUNDO',
        'Sala 1 - Pr√©dio 2': 'SALA_1_PREDIO_2',
        'Sala 2 - Pr√©dio 2': 'SALA_2_PREDIO_2',
        'Sala de Reuni√£o do Pr√©dio 1': 'SALA_REUNIAO_PREDIO_1',
        'Sala de treinamento do Cont√™iner': 'SALA_TREINAMENTO',
        'Sala do SuperaLab': 'SALA_SUPERA_LAB'
    };

    const calendarKey = spaceMapping[espacoSelecionado];
    if (!calendarKey) {
        throw new Error(`Espa√ßo n√£o encontrado: ${espacoSelecionado}. Espa√ßos dispon√≠veis: ${Object.keys(spaceMapping).join(', ')}`);
    }

    return calendarIds[calendarKey];
}

// Fun√ß√£o para processar hor√°rio da reserva - 3 perguntas separadas
function parseHorarioReserva(responses) {
    try {
        const dataReserva = responses['Data da reserva'];
        const horaInicio = responses['Hor√°rio de in√≠cio'] ||
            responses['Hor√°rio de inicio'] ||
            responses['Hor√°rio de in√≠cio (Formato 24hrs)'];
        const horaFim = responses['Hor√°rio de fim'] ||
            responses['Hor√°rio final'] ||
            responses['Hor√°rio de fim (Formato 24hrs)'];

        // Validar se todos os campos est√£o presentes
        if (!dataReserva) {
            throw new Error('Campo "Data da reserva" √© obrigat√≥rio');
        }
        if (!horaInicio) {
            throw new Error('Campo "Hor√°rio de in√≠cio" √© obrigat√≥rio. Campos dispon√≠veis: ' + Object.keys(responses).join(', '));
        }
        if (!horaFim) {
            throw new Error('Campo "Hor√°rio de fim" √© obrigat√≥rio. Campos dispon√≠veis: ' + Object.keys(responses).join(', '));
        }

        // Processar data - Google Forms pode retornar "2024-01-15" ou "15/01/2024"
        let dataFormatada = dataReserva;
        if (dataReserva.includes('/')) {
            const [dia, mes, ano] = dataReserva.split('/');
            dataFormatada = `${ano}-${mes.padStart(2, '0')}-${dia.padStart(2, '0')}`;
        }

        // Processar hor√°rios - garantir formato HH:MM
        const horaInicioFormatada = horaInicio.includes(':') ? horaInicio : `${horaInicio}:00`;
        const horaFimFormatada = horaFim.includes(':') ? horaFim : `${horaFim}:00`;

        // Criar objetos Date
        const startDate = new Date(`${dataFormatada}T${horaInicioFormatada}:00-03:00`);
        const endDate = new Date(`${dataFormatada}T${horaFimFormatada}:00-03:00`);

        // Validar se as datas s√£o v√°lidas
        if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
            throw new Error('Data ou hor√°rio inv√°lido');
        }

        // Validar se hor√°rio de fim √© ap√≥s hor√°rio de in√≠cio
        if (endDate <= startDate) {
            throw new Error('Hor√°rio de fim deve ser posterior ao hor√°rio de in√≠cio');
        }

        console.log(`Data/hora processada: ${startDate.toLocaleString('pt-BR')} - ${endDate.toLocaleString('pt-BR')}`);

        return { startDate, endDate };

    } catch (error) {
        console.error('Erro ao processar hor√°rio:', error.message);
        throw new Error(`Erro ao processar hor√°rio da reserva: ${error.message}`);
    }
}

app.get('/', (req, res) => {
    res.send('Servidor de integra√ß√£o Supera Parque est√° no ar! üöÄ');
});

// Endpoint para receber dados do Google Forms
app.post('/webhook/google-forms', async (req, res) => {
    console.log('--- Webhook do Google Forms recebido! ---');

    try {
        const formData = req.body;
        console.log('Dados recebidos do Google Forms:', JSON.stringify(formData, null, 2));

        // Extrair informa√ß√µes do formul√°rio
        const responses = formData.responses || {};

        // Campos do formul√°rio
        const nomeEvento = responses['Nome do evento'];
        const espacoAutorizado = responses['Espa√ßo autorizado para reserva'];
        const nome = responses['Nome'];
        const email = responses['E-mail'];
        const telefone = responses['N√∫mero de telefone com DDD (WhatsApp)'];
        const cargo = responses['Cargo'];
        const departamento = responses['Departamento ou empresa (startups) no qual trabalha'];

        // Valida√ß√µes
        if (!nomeEvento) {
            throw new Error('Campo "Nome do evento" √© obrigat√≥rio');
        }
        if (!espacoAutorizado) {
            throw new Error('Campo "Espa√ßo autorizado para reserva" √© obrigat√≥rio');
        }

        // Processar hor√°rio (suporta m√∫ltiplos formatos)
        const { startDate, endDate } = parseHorarioReserva(responses);

        // Montar descri√ß√£o
        const descricao = `Nome: ${nome || 'N√£o informado'}
E-mail: ${email || 'N√£o informado'}
N√∫mero de telefone com DDD (WhatsApp): ${telefone || 'N√£o informado'}
Cargo: ${cargo || 'N√£o informado'}
Departamento ou empresa (startups) no qual trabalha: ${departamento || 'N√£o informado'}`;

        // Preparar dados do evento
        const eventData = {
            summary: nomeEvento,
            description: descricao,
            start: startDate,
            end: endDate,
            attendees: email ? [email] : []
        };

        // Determinar o calend√°rio baseado no espa√ßo
        const calendarId = getCalendarIdBySpace(espacoAutorizado);

        console.log(`Criando evento "${nomeEvento}" no espa√ßo: ${espacoAutorizado}`);
        console.log(`Hor√°rio: ${startDate.toLocaleString('pt-BR')} - ${endDate.toLocaleString('pt-BR')}`);
        console.log(`Calendar ID: ${calendarId}`);

        // Criar evento no Google Calendar (passando o calendarId diretamente)
        const result = await createGoogleCalendarEvent(eventData, null, calendarId);

        console.log('Evento criado com sucesso!', {
            eventId: result.id,
            eventLink: result.htmlLink,
            space: espacoAutorizado
        });

        res.status(200).json({
            success: true,
            message: 'Evento criado com sucesso!',
            eventId: result.id,
            eventLink: result.htmlLink,
            space: espacoAutorizado,
            eventData: {
                title: nomeEvento,
                start: startDate.toISOString(),
                end: endDate.toISOString()
            }
        });

    } catch (error) {
        console.error('Erro no processamento do webhook:', error.message);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// Endpoint para testar o processamento de dados
app.post('/test-webhook', async (req, res) => {
    console.log('--- Endpoint de teste chamado! ---');

    const testData = {
        timestamp: new Date().toISOString(),
        responseId: 'test-123',
        respondentEmail: 'teste@superaparque.com',
        responses: {
            'Nome do evento': 'Reuni√£o de Planejamento 2024',
            'Data da reserva': '2024-01-15',
            'Hor√°rio de in√≠cio (Formato 24hrs)': '14:00',
            'Hor√°rio de fim (Formato 24hrs)': '16:00',
            'Espa√ßo autorizado para reserva': 'Sala de Reuni√£o - Pr√©dio 1',
            'Nome': 'Jo√£o Silva',
            'E-mail': 'joao.silva@superaparque.com',
            'N√∫mero de telefone com DDD (WhatsApp)': '(11) 99999-9999',
            'Cargo': 'Coordenador',
            'Departamento ou empresa (startups) no qual trabalha': 'Supera Parque - Inova√ß√£o'
        }
    };

    // Processar como webhook real
    req.body = testData;

    try {
        const formData = req.body;
        const responses = formData.responses || {};

        const nomeEvento = responses['Nome do evento'];
        const espacoAutorizado = responses['Espa√ßo autorizado para reserva'];
        const nome = responses['Nome'];
        const email = responses['E-mail'];
        const telefone = responses['N√∫mero de telefone com DDD (WhatsApp)'];
        const cargo = responses['Cargo'];
        const departamento = responses['Departamento ou empresa (startups) no qual trabalha'];

        const { startDate, endDate } = parseHorarioReserva(responses);

        const descricao = `Nome: ${nome || 'N√£o informado'}
E-mail: ${email || 'N√£o informado'}
N√∫mero de telefone com DDD (WhatsApp): ${telefone || 'N√£o informado'}
Cargo: ${cargo || 'N√£o informado'}
Departamento ou empresa (startups) no qual trabalha: ${departamento || 'N√£o informado'}`;

        const eventData = {
            summary: nomeEvento,
            description: descricao,
            start: startDate,
            end: endDate,
            attendees: email ? [email] : []
        };

        const result = await createGoogleCalendarEvent(eventData, espacoAutorizado);

        res.status(200).json({
            success: true,
            message: 'Teste executado com sucesso!',
            eventId: result.id,
            eventLink: result.htmlLink,
            testData: testData
        });

    } catch (error) {
        console.error('Erro no teste:', error.message);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

app.listen(PORT, () => {
    console.log(`Servidor de integra√ß√£o Supera Parque rodando na porta ${PORT}`);
    console.log(`Endpoints dispon√≠veis:`);
    console.log(`  GET  / - Status do servidor`);
    console.log(`  POST /webhook/google-forms - Webhook do Google Forms`);
    console.log(`  POST /test-webhook - Teste local`);
});
